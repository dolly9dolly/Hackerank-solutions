{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red22\green107\blue41;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c7451\c48627\c21176;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf0 \strokec4  java.io.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  java.math.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  java.security.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  java.text.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  java.util.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  java.util.concurrent.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  java.util.regex.*;\cb1 \
\
\cf2 \cb3 \strokec2 class\cf0 \strokec4  Result \{\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 /*\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5      * Complete the 'solve' function below.\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5      *\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5      * The function accepts following parameters:\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5      *  1. DOUBLE meal_cost\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5      *  2. INTEGER tip_percent\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5      *  3. INTEGER tax_percent\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5      */\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 public\cf0 \strokec4  \cf2 \strokec2 static\cf0 \strokec4  \cf2 \strokec2 void\cf0 \strokec4  solve(\cf2 \strokec2 double\cf0 \strokec4  meal_cost, \cf2 \strokec2 int\cf0 \strokec4  tip_percent, \cf2 \strokec2 int\cf0 \strokec4  tax_percent) \{\cb1 \
\cb3     \cf5 \strokec5 // Write your code here\cf0 \cb1 \strokec4 \
\cb3      \cf2 \strokec2 int\cf0 \strokec4  total = \cf5 \strokec5 0\cf0 \strokec4 ;\cb1 \
\cb3      \cf2 \strokec2 double\cf0 \strokec4  tip = ((meal_cost/\cf5 \strokec5 100\cf0 \strokec4 )*tip_percent);\cb1 \
\cb3      \cf2 \strokec2 double\cf0 \strokec4  tax = ((meal_cost/\cf5 \strokec5 100\cf0 \strokec4 )*tax_percent);\cb1 \
\cb3       total = (\cf2 \strokec2 int\cf0 \strokec4 )Math.round(meal_cost + tip + tax) ;\cb1 \
\cb3       System.out.println(total);\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 public\cf0 \strokec4  \cf2 \strokec2 class\cf0 \strokec4  Solution \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 public\cf0 \strokec4  \cf2 \strokec2 static\cf0 \strokec4  \cf2 \strokec2 void\cf0 \strokec4  main(String[] args) \cf2 \strokec2 throws\cf0 \strokec4  IOException \{\cb1 \
\cb3         BufferedReader bufferedReader = \cf2 \strokec2 new\cf0 \strokec4  BufferedReader(\cf2 \strokec2 new\cf0 \strokec4  InputStreamReader(System.in));\cb1 \
\
\cb3         \cf2 \strokec2 double\cf0 \strokec4  meal_cost = Double.parseDouble(bufferedReader.readLine().trim());\cb1 \
\
\cb3         \cf2 \strokec2 int\cf0 \strokec4  tip_percent = Integer.parseInt(bufferedReader.readLine().trim());\cb1 \
\
\cb3         \cf2 \strokec2 int\cf0 \strokec4  tax_percent = Integer.parseInt(bufferedReader.readLine().trim());\cb1 \
\
\cb3         Result.solve(meal_cost, tip_percent, tax_percent);\cb1 \
\
\cb3         bufferedReader.close();\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
}